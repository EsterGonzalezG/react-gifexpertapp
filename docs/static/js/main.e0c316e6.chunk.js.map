{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"yMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAKhB,SACE,gCACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAhBlB,SAACP,GACzBF,EAAcE,EAAMQ,OAAOF,e,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAKEI,MAAMF,GALR,cAKfG,EALe,gBAMEA,EAASC,OANX,uBAMbC,EANa,EAMbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CAAEC,GAAID,EAAIC,GAAIC,MAAOF,EAAIE,MAAOV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARtD,kBAWdM,GAXc,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEvC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDZ2BK,CAAa1B,GAAjCa,EADyB,EAC/BN,KAAca,EADiB,EACjBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aETnBgB,EAAe,WAAO,IAAD,EACIzC,mBAAS,CAAC,cADd,mBACzBQ,EADyB,KACbT,EADa,KAOhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BACGS,EAAWe,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCfxB4B,IAASC,OACP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.e0c316e6.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { useState } from 'react';\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((categories) => [inputValue, ...categories]);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        <input type='text' value={inputValue} onChange={handleInputChange} />\r\n      </label>\r\n    </form>\r\n  );\r\n};\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category,\r\n  )}&limit=10&api_key=ItCmgwqeW2ZtJmoZjio0a42iEPkUDrPo`;\r\n\r\n  const response = await fetch(url);\r\n  const { data } = await response.json();\r\n  const gifs = data.map((img) => {\r\n    return { id: img.id, title: img.title, url: img.images?.downsized_medium.url };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  // console.log(id, title, url);\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from './../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n      {loading && <p className='animate__animated animate__flash'>loading</p>}\r\n      <div className='card-grid'>\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from './../helpers/getGifs';\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState(['One Punch']);\r\n  /*  const handleAdd = () => {\r\n    //  setCategories([...categories, \"otro\"]);\r\n    //tienes uncallback con el estado anterior\r\n    setCategories((categorias) => [...categorias, \"otro\"]);\r\n  }; */\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      {/* <button onClick={handleAdd}>AÃ±adir</button> */}\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n          // <li key={category}>{category}</li>\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}